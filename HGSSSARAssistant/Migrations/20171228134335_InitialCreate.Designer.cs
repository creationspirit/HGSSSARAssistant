// <auto-generated />
using HGSSSARAssistant.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace HGSSSARAssistant.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20171228134335_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("HGSSSARAssistant.Models.Action", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActionTypeID");

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<long?>("LocationID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("ActionTypeID");

                    b.HasIndex("LocationID");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.ActionType", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("ActionTypes");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Adress");

                    b.Property<string>("AlternateContact");

                    b.Property<bool>("Available");

                    b.Property<long?>("CategoryID");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Contact");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<long?>("StationID");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("CategoryID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.HasIndex("StationID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Availability", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("DaysInWeek");

                    b.Property<DateTime>("EndTime");

                    b.Property<long?>("LocationID");

                    b.Property<string>("RescuerId");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.HasIndex("RescuerId");

                    b.ToTable("Availabilities");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Category", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Location", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<decimal>("Latitude");

                    b.Property<decimal>("Magnitude");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.RescuerAction", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActionID");

                    b.Property<string>("RescuerId");

                    b.HasKey("ID");

                    b.HasIndex("ActionID");

                    b.HasIndex("RescuerId");

                    b.ToTable("RescuerActions");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.RescuerSkill", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RescuerId");

                    b.Property<long?>("SkillID");

                    b.HasKey("ID");

                    b.HasIndex("RescuerId");

                    b.HasIndex("SkillID");

                    b.ToTable("RescuerSkills");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Skill", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Station", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("LocationID");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Stations");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Action", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.ActionType", "ActionType")
                        .WithMany()
                        .HasForeignKey("ActionTypeID");

                    b.HasOne("HGSSSARAssistant.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.ApplicationUser", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.HasOne("HGSSSARAssistant.Models.Station", "Station")
                        .WithMany()
                        .HasForeignKey("StationID");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Availability", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");

                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser", "Rescuer")
                        .WithMany()
                        .HasForeignKey("RescuerId");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.RescuerAction", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.Action", "Action")
                        .WithMany()
                        .HasForeignKey("ActionID");

                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser", "Rescuer")
                        .WithMany()
                        .HasForeignKey("RescuerId");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.RescuerSkill", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser", "Rescuer")
                        .WithMany()
                        .HasForeignKey("RescuerId");

                    b.HasOne("HGSSSARAssistant.Models.Skill", "Skill")
                        .WithMany()
                        .HasForeignKey("SkillID");
                });

            modelBuilder.Entity("HGSSSARAssistant.Models.Station", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HGSSSARAssistant.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
